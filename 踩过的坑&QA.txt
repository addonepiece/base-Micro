踩过的坑
    1，阿里云服务器安装tomcat时，修改tomcat config server.xml时出现centos下vim修改保存的文件有不正确的内容导致tomcat无法启动。
        端口需要在阿里云服务的实例中的配置放行。

    2.jenkins自动构建
        插件的下载   maven编译时注意项目中pom文件的maven相关plugin的正确配置。如maven项目不能配置springboot项目的maven插件
        <!--<groupId>org.springframework.boot</groupId>--> <!--<artifactId>spring-boot-maven-plugin</artifactId>-->

    3.如果maven项目中有modules，则要在modules的pom.xml中配置 <parent>
                                                       <groupId>com.dly</groupId>
                                                       <artifactId>base-micro</artifactId>
                                                       <version>1.0-SNAPSHOT</version>
                                                       <relativePath>../pom.xml</relativePath>
                                                   </parent>

        依赖包下载到了maven仓库但是没有加载到libraries中。
            reimport 或 invalidate and resstart 或 统一编码 或 删除target下所有文件后重新build，即重新编译代码。

        project的libararies中存在的jar，module中确不能用。
            file->project structure->modules->dependencies 将需要的jar包应用到module中。

        pom文件不报错，但是不生效可能是<artifactId>${service.name}</artifactId>中使用了变量。

        bootstrap.yml 中无法使用@xxx@ 表达式肯能是应为 pom文件中未加入
            <build>
                    <resources>
                        <resource>
                            <directory>src/main/resources</directory>
                            <includes>
                                <include>**/*.properties</include>
                                <include>**/*.yml</include>
                                <include>**/*.xml</include>
                                <include>**/*.json</include>
                            </includes>
                            <filtering>true</filtering>
                        </resource>
                    </resources>

    4.redis集成
        需要选择连接方式如jedis，Lettuce，redis需要自行配置才能成功初始化到bean容器。
        Lettuce和Jedis的都是连接Redis Server的客户端程序。Jedis在实现上是直连redis server，
        多线程环境下非线程安全，除非使用连接池，为每个Jedis实例增加物理连接。
        Lettuce基于Netty的连接实例（StatefulRedisConnection），可以在多个线程间并发访问，且线程安全，
        满足多线程环境下的并发访问，同时它是可伸缩的设计，一个连接实例不够的情况也可以按需增加连接实例。

        实际使用redis存取数据时需要自定义序列化策略。

     5.hikari
        springboot2+ 数据源默认使用的是hikariPC 配置超级简单 1 引入相关依赖包 2 配置文件中配置datasource





















Q&A
    IDAE中 Maven Projects view 中Lifecycle和Plugins的区别

“雪崩”效应

    在微服务架构中，根据业务来拆分成一个个的服务，服务与服务之间可以相互调用（RPC），在Spring Cloud可以用RestTemplate+Ribbon和Feign来调用。
    为了保证其高可用，单个服务通常会集群部署。
    由于网络原因或者自身的原因，服务并不能保证100%可用，如果单个服务出现问题，调用这个服务就会出现线程阻塞，
    此时若有大量的请求涌入，Servlet容器的线程资源会被消耗完毕，导致服务瘫痪。
    服务与服务之间的依赖性，故障会传播，会对整个微服务系统造成灾难性的严重后果，这就是服务故障的“雪崩”效应。
    为了解决这个问题，业界提出了断路器模型。
    Netflix开源了Hystrix组件，实现了断路器模式，SpringCloud对这一组件进行了整合。

    在微服务架构中，一个请求需要调用多个服务是非常常见的。
    较底层的服务如果出现故障，会导致连锁故障。当对特定的服务的调用的不可用达到一个阀值（Hystric 是5秒20次） 断路器将会被打开。
    断路打开后，可用避免连锁故障，fallback方法可以直接返回一个固定值。

    Hystric dashboard依赖包问题，新版的springboot 更新的比较快，很多三方包的使用和更新可能会存在问题，通过网上查找和
    换成其他版本的依赖包测试，哪个好用留哪个。



 难点（微服务的挑战）
    权限控制和服务间的权限认证（准备采用spring security结合Oauth2来实现）
    跨域问题（参照 https://www.jianshu.com/p/f880878c1398）


